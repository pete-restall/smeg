ASSERT(
    ({sram2_size_in_words} * 4) >= 0 && ({sram2_size_in_words} * 4) < 16K,
    "Specified SRAM2 size in words is not valid for the device; sram2_reserved_size_in_words={sram2_size_in_words}");

MEMORY
\{
    FLASH_INITIAL_SP :
        ORIGIN = 0x08000000,
        LENGTH = 4

    FLASH_ISR_VECTOR_TABLE :
        ORIGIN = 0x08000004,
        LENGTH = (15 + 85) * 4

    FLASH_TEXT :
        ORIGIN = ORIGIN(FLASH_ISR_VECTOR_TABLE) + LENGTH(FLASH_ISR_VECTOR_TABLE),
        LENGTH = 256K - 400

    SRAM : ORIGIN = 0x20000000, LENGTH = 64K - {sram2_size_in_words} * 4
    SRAM2 : ORIGIN = 0x20010000 - ALIGN({sram2_size_in_words} * 4, 8), LENGTH = ALIGN({sram2_size_in_words} * 4, 8)

    PERIPHERALS : ORIGIN = 0x40000000, LENGTH = 0x20000000
}

ENTRY(_reset_handler);
EXTERN(_reset_handler);

SECTIONS
\{
    .text.isr_vector_table : \{
        KEEP(*(.smeg.isr_vector_table.arm.cortex_m4));
        KEEP(*(.smeg.isr_vector_table.st.stm32l432kc));
        ASSERT(
            (. - ADDR(.text.isr_vector_table) == LENGTH(FLASH_ISR_VECTOR_TABLE)),
            "The interrupt vector table must contain 15 ARM-defined vectors and 85 STM32L432KC-specific vectors");
    } > FLASH_ISR_VECTOR_TABLE

    .text : \{
        . = ALIGN(4);
        __LINKER_TEXT_START = .;
        KEEP(*(.smeg.bootstrap .smeg.bootstrap.*));
        *: (.text .text.*);
        __LINKER_TEXT_PAST_END = .;
        . = ALIGN(4);
    } > FLASH_TEXT

    .data ORIGIN(SRAM) : \{
        . = ALIGN(4);
        __LINKER_DATA_START = .;
        *: (.rodata .rodata.*);
        __LINKER_DATA_PAST_END = .;
        . = ALIGN(4);
    } > SRAM AT> FLASH_TEXT
    __LINKER_DATA_LMA_START = ALIGN(LOADADDR(.data), 4);
    __LINKER_DATA_LMA_PAST_END = __LINKER_DATA_LMA_START + (__LINKER_DATA_PAST_END - __LINKER_DATA_START);

    .bss : \{
        . = ALIGN(4);
        __LINKER_BSS_START = .;
        *: (.bss .bss.*);
        __LINKER_BSS_PAST_END = .;
        . = ALIGN(4);
    } > SRAM

    .sram2 ORIGIN(SRAM2) : \{
        *: (.kernel.stack.0);
        __LINKER_KERNEL_STACK_PAST_END = .;
        ASSERT(. == ALIGN(8), "Kernel stack size must be a multiple of 8 bytes");
    } > SRAM2

    .text.initial_sp ORIGIN(FLASH_INITIAL_SP) : \{
        __LINKER_INITIAL_SP = .;
        LONG(__LINKER_KERNEL_STACK_PAST_END);
    } > FLASH_INITIAL_SP

    .peripherals.ahb1.rcc 0x40021000 (TYPE = SHT_NOBITS) : \{ __LINKER_PERIPHERALS_AHB1_RCC = .; . += 0x400; } > PERIPHERALS
    .peripherals.ahb2.gpio_b 0x48000400 (TYPE = SHT_NOBITS) : \{ __LINKER_PERIPHERALS_AHB2_GPIOB = .; . += 0x400; } > PERIPHERALS

    .ARM.attributes /* (NOLOAD) */ : \{ KEEP(* (.ARM.attributes)) }
    .comment /* (NOLOAD) */ : \{ KEEP(* (.comment)) }
    .debug_abbrev /* (NOLOAD) */ : \{ KEEP(* (.debug_abbrev)) }
    .debug_rnglists /* (NOLOAD) */ : \{ KEEP(* (.debug_rnglists)) }
    .debug_aranges /* (NOLOAD) */ : \{ KEEP(* (.debug_aranges)) }
    .debug_frame /* (NOLOAD) */ : \{ KEEP(* (.debug_frame)) }
    .debug_info /* (NOLOAD) */ : \{ KEEP(* (.debug_info)) }
    .debug_line /* (NOLOAD) */ : \{ KEEP(* (.debug_line)) }
    .debug_line_str /* (NOLOAD) */: \{ KEEP(* (.debug_line_str)) }
    .debug_str /* (NOLOAD) */ : \{ KEEP(* (.debug_str)) }
    .symtab /* (NOLOAD) */ : \{ KEEP(* (.symtab)) }
    .shstrtab : \{ KEEP(* (.shstrtab)) }
    .strtab : \{ KEEP(* (.strtab)) }

    .stack_sizes (INFO) : \{
        KEEP(* (.stack_sizes));
    }

    /DISCARD/ : \{
        *: (.ARM.exidx .ARM.exidx.*)
        *: (.ARM.extab .ARM.extab.*)
    }
}
